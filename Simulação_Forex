{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOcaFx9n/GAIX5tdTKoCy++",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EricaFer/Libraries/blob/master/Simula%C3%A7%C3%A3o_Forex\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dptISH0pszTT"
      },
      "source": [
        "import numpy as np\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "\r\n",
        "def simulacao_forex(aporte_inicial, aporte_mensal,juros,tempo):\r\n",
        "\r\n",
        "  def calculo_montante():\r\n",
        "    \r\n",
        "    lista_montante = []\r\n",
        "    montante = aporte_inicial\r\n",
        "\r\n",
        "    for _ in range(0,tempo):\r\n",
        "      montante = montante * (1 + juros)\r\n",
        "      montante += aporte_mensal\r\n",
        "      lista_montante.append(montante)\r\n",
        "\r\n",
        "    return lista_montante\r\n",
        "\r\n",
        "  def calculo_lucro(lista_montante):\r\n",
        "    investido = aporte_inicial + aporte_mensal * (tempo - 1)\r\n",
        "    lucro = lista_montante[-1] - investido\r\n",
        "    return investido, lucro\r\n",
        "\r\n",
        "  def plot(lista_montante):\r\n",
        "    plt.plot(list(np.arange(0,tempo)), lista_montante, color = 'blue', marker = '')\r\n",
        "    plt.show()\r\n",
        "\r\n",
        "  def info_importante(investido, lucro):\r\n",
        "    print('#' * 40) \r\n",
        "    print('\\nLucro: {:,.2f} \\n'.format(lucro))\r\n",
        "    print('Investido: {:,.2f} \\n'.format(investido))\r\n",
        "    print('Montante Final: {:,.2f}\\n'.format(lista_montante[-1]))\r\n",
        "    print('Parcela Final: {:,.2f}\\n'.format(lista_montante[-1] * juros))\r\n",
        "    print('#' * 40) \r\n",
        "\r\n",
        "  lista_montante = calculo_montante()\r\n",
        "  investido, lucro = calculo_lucro(lista_montante)\r\n",
        "  info_importante(investido, lucro)\r\n",
        "  plot(lista_montante)"
      ],
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "_-rGgBW9tJg1",
        "outputId": "110e20f7-17db-4cbb-9a43-54cceda5b0c9"
      },
      "source": [
        "simulacao_forex(600,1000,0.007974140428903764,96)"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "########################################\n",
            "\n",
            "Lucro: 49,098.33 \n",
            "\n",
            "Investido: 95,600.00 \n",
            "\n",
            "Montante Final: 144,698.33\n",
            "\n",
            "Parcela Final: 1,153.84\n",
            "\n",
            "########################################\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OnaIzJEgtOCQ"
      },
      "source": [
        "1.0079741404289038 - 1"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s-w51BY_694F"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}